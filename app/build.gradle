def secrets = System.getenv("GOOGLE_SERVICES_JSON")
def analyticsEnabled = secrets != null

apply plugin: "com.android.application"
apply plugin: "kotlin-android"

if (analyticsEnabled) {
    apply plugin: "com.google.gms.google-services"
    apply plugin: "com.google.firebase.crashlytics"
}

android {
    compileSdk = 36

    def gitCommitHash = "git rev-parse HEAD".execute().text.trim()
    def shortCommitHash = "git rev-parse --short HEAD".execute().text.trim()

    defaultConfig {
        applicationId = "pro.sketchware"
        namespace = "pro.sketchware"
        //noinspection ExpiredTargetSdkVersion since we don't target getting Sketchware Pro on Google Play.
        targetSdk = 28
        minSdk = 26
        versionCode = 150
        versionName = "v7.0.0"

        buildConfigField("String", "GIT_HASH", "\"${gitCommitHash}\"")

        buildConfigField("String", "SKETCHUB_API_KEY", "\"${System.getenv("SKETCHUB_API_KEY")}\"")
    }

    buildTypes {
        release {
            minifyEnabled = false
            proguardFiles(getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro")
            signingConfig = signingConfigs.debug
        }
    }

    packagingOptions {
        resources.excludes += "license/*"
        resources.excludes += "META-INF/DEPENDENCIES"
        resources.pickFirsts += "api_database/*"
    }

    compileOptions {
        coreLibraryDesugaringEnabled = true
        sourceCompatibility = JavaVersion.VERSION_17
        targetCompatibility = JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = "17"
    }

    androidResources {
        additionalParameters.addAll("--stable-ids", "${rootDir}/public-stable-ids.txt")
    }

    signingConfigs {
        debug {
            storeFile = file("../testkey.keystore")
            storePassword = "testkey"
            keyAlias = "testkey"
            keyPassword = "testkey"
        }
    }

    buildFeatures {
        viewBinding = true
        buildConfig = true
    }

    configurations.implementation {
        exclude group: 'javax.inject', module: 'javax.inject'
        exclude group: "org.jetbrains.kotlin", module: "kotlin-scripting-compiler-embeddable"
        exclude group: "org.jetbrains.kotlin", module: "kotlin-scripting-common"
        exclude group: "org.jetbrains.kotlin", module: "kotlin-scripting-jvm"
        exclude group: "org.jetbrains.kotlin", module: "kotlin-script-runtime"
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar", "*.aar"])

    implementation libs.bundles.ui

    implementation libs.bundles.image

    implementation platform(libs.sora.editor)
    implementation libs.bundles.editor.and.lang

    implementation libs.bundles.coil

    implementation libs.bundles.bundletool
    implementation(libs.sdklib) {
        exclude group: "com.intellij", module: "annotations"
    }

    implementation libs.bundles.shrinker
    implementation libs.zipalign.java

    implementation libs.gson
    implementation libs.scpkix.jdk15on

    implementation libs.markwon

    implementation libs.bundles.networking

    implementation libs.ecj
    implementation libs.stax.api

    implementation libs.bundles.kotlin.compiler
    compileOnly libs.kotlin.compiler

    implementation libs.dependencyresolver
    implementation libs.filepicker

    implementation libs.libsu
    implementation libs.insetter

    implementation(libs.javaparser.symbol.solver) {
        exclude group: "com.google.guava", module: "guava"
    }

    // Analytics and Crashlytics
    if (analyticsEnabled) {
        new File("$projectDir/google-services.json").text = secrets
    }
    implementation platform(libs.firebase.bom)
    implementation libs.bundles.firebase

    coreLibraryDesugaring libs.desugar.jdk.libs.nio
}
